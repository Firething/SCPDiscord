// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BotToPlugin/SyncRoleCommand.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SCPDiscord.Interface {

  /// <summary>Holder for reflection information generated from BotToPlugin/SyncRoleCommand.proto</summary>
  public static partial class SyncRoleCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for BotToPlugin/SyncRoleCommand.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SyncRoleCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFCb3RUb1BsdWdpbi9TeW5jUm9sZUNvbW1hbmQucHJvdG8SFFNDUERpc2Nv",
            "cmQuSW50ZXJmYWNlIpwBCg9TeW5jUm9sZUNvbW1hbmQSEQoJY2hhbm5lbElE",
            "GAEgASgEEhUKDWRpc2NvcmRVc2VySUQYAiABKAQSEwoLc3RlYW1JRE9ySVAY",
            "AyABKAkSFwoPZGlzY29yZFVzZXJuYW1lGAQgASgJEhUKDWludGVyYWN0aW9u",
            "SUQYBSABKAQSGgoSZGlzY29yZERpc3BsYXlOYW1lGAYgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SCPDiscord.Interface.SyncRoleCommand), global::SCPDiscord.Interface.SyncRoleCommand.Parser, new[]{ "ChannelID", "DiscordUserID", "SteamIDOrIP", "DiscordUsername", "InteractionID", "DiscordDisplayName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SyncRoleCommand : pb::IMessage<SyncRoleCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SyncRoleCommand> _parser = new pb::MessageParser<SyncRoleCommand>(() => new SyncRoleCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SyncRoleCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SCPDiscord.Interface.SyncRoleCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SyncRoleCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SyncRoleCommand(SyncRoleCommand other) : this() {
      channelID_ = other.channelID_;
      discordUserID_ = other.discordUserID_;
      steamIDOrIP_ = other.steamIDOrIP_;
      discordUsername_ = other.discordUsername_;
      interactionID_ = other.interactionID_;
      discordDisplayName_ = other.discordDisplayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SyncRoleCommand Clone() {
      return new SyncRoleCommand(this);
    }

    /// <summary>Field number for the "channelID" field.</summary>
    public const int ChannelIDFieldNumber = 1;
    private ulong channelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ChannelID {
      get { return channelID_; }
      set {
        channelID_ = value;
      }
    }

    /// <summary>Field number for the "discordUserID" field.</summary>
    public const int DiscordUserIDFieldNumber = 2;
    private ulong discordUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DiscordUserID {
      get { return discordUserID_; }
      set {
        discordUserID_ = value;
      }
    }

    /// <summary>Field number for the "steamIDOrIP" field.</summary>
    public const int SteamIDOrIPFieldNumber = 3;
    private string steamIDOrIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SteamIDOrIP {
      get { return steamIDOrIP_; }
      set {
        steamIDOrIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discordUsername" field.</summary>
    public const int DiscordUsernameFieldNumber = 4;
    private string discordUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscordUsername {
      get { return discordUsername_; }
      set {
        discordUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interactionID" field.</summary>
    public const int InteractionIDFieldNumber = 5;
    private ulong interactionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong InteractionID {
      get { return interactionID_; }
      set {
        interactionID_ = value;
      }
    }

    /// <summary>Field number for the "discordDisplayName" field.</summary>
    public const int DiscordDisplayNameFieldNumber = 6;
    private string discordDisplayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscordDisplayName {
      get { return discordDisplayName_; }
      set {
        discordDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SyncRoleCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SyncRoleCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelID != other.ChannelID) return false;
      if (DiscordUserID != other.DiscordUserID) return false;
      if (SteamIDOrIP != other.SteamIDOrIP) return false;
      if (DiscordUsername != other.DiscordUsername) return false;
      if (InteractionID != other.InteractionID) return false;
      if (DiscordDisplayName != other.DiscordDisplayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelID != 0UL) hash ^= ChannelID.GetHashCode();
      if (DiscordUserID != 0UL) hash ^= DiscordUserID.GetHashCode();
      if (SteamIDOrIP.Length != 0) hash ^= SteamIDOrIP.GetHashCode();
      if (DiscordUsername.Length != 0) hash ^= DiscordUsername.GetHashCode();
      if (InteractionID != 0UL) hash ^= InteractionID.GetHashCode();
      if (DiscordDisplayName.Length != 0) hash ^= DiscordDisplayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelID);
      }
      if (DiscordUserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordUserID);
      }
      if (SteamIDOrIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SteamIDOrIP);
      }
      if (DiscordUsername.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DiscordUsername);
      }
      if (InteractionID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(InteractionID);
      }
      if (DiscordDisplayName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DiscordDisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelID);
      }
      if (DiscordUserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DiscordUserID);
      }
      if (SteamIDOrIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SteamIDOrIP);
      }
      if (DiscordUsername.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DiscordUsername);
      }
      if (InteractionID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(InteractionID);
      }
      if (DiscordDisplayName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DiscordDisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ChannelID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelID);
      }
      if (DiscordUserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DiscordUserID);
      }
      if (SteamIDOrIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamIDOrIP);
      }
      if (DiscordUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscordUsername);
      }
      if (InteractionID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InteractionID);
      }
      if (DiscordDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscordDisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SyncRoleCommand other) {
      if (other == null) {
        return;
      }
      if (other.ChannelID != 0UL) {
        ChannelID = other.ChannelID;
      }
      if (other.DiscordUserID != 0UL) {
        DiscordUserID = other.DiscordUserID;
      }
      if (other.SteamIDOrIP.Length != 0) {
        SteamIDOrIP = other.SteamIDOrIP;
      }
      if (other.DiscordUsername.Length != 0) {
        DiscordUsername = other.DiscordUsername;
      }
      if (other.InteractionID != 0UL) {
        InteractionID = other.InteractionID;
      }
      if (other.DiscordDisplayName.Length != 0) {
        DiscordDisplayName = other.DiscordDisplayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelID = input.ReadUInt64();
            break;
          }
          case 16: {
            DiscordUserID = input.ReadUInt64();
            break;
          }
          case 26: {
            SteamIDOrIP = input.ReadString();
            break;
          }
          case 34: {
            DiscordUsername = input.ReadString();
            break;
          }
          case 40: {
            InteractionID = input.ReadUInt64();
            break;
          }
          case 50: {
            DiscordDisplayName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelID = input.ReadUInt64();
            break;
          }
          case 16: {
            DiscordUserID = input.ReadUInt64();
            break;
          }
          case 26: {
            SteamIDOrIP = input.ReadString();
            break;
          }
          case 34: {
            DiscordUsername = input.ReadString();
            break;
          }
          case 40: {
            InteractionID = input.ReadUInt64();
            break;
          }
          case 50: {
            DiscordDisplayName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
